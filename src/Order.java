// Import statements.
import java.time.LocalDate;
import java.util.ArrayList;

// Order class.
public class Order {

    // Creates an order count and sets it to zero.
    private static int totalCount = 1;

    // Attributes for every order object.
    // Order number is autogenerated from the total number of orders.
    // Name, phone number, and pickup data are provided on construction.
    // Order details starts out as an empty array list.
    private final int orderNumber;
    private final String name;
    private final String phoneNumber;
    private final LocalDate pickupDate;
    private final ArrayList<Sweets> orderDetail = new ArrayList<>();

    // Constructor for an order.
    // Must always have the customer name (N), phone (PN), and a pickup date (year-month-day) as parameters.
    public Order(String N, String PN, int year, int month, int day) {
        orderNumber = totalCount++;
        name = N;
        phoneNumber = PN;
        pickupDate = LocalDate.of(year, month, day);
    }

    /**
     * Gets the order number.
     * @return orderNumber (int)
     */
    public int getOrderNumber() {
        return orderNumber;
    }

    /**
     * Gets the customer's name.
     * @return name (String)
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the customer's phone number.
     * @return phoneNumber (String)
     */
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Gets the order's pickup date.
     * @return pickupDate (LocalDate)
     */
    public LocalDate getPickupDate() {
        return pickupDate;
    }

    /**
     * Adds a cake to the order detail array list.
     * @param count (int) is the number of cakes to add.
     */
    public void addCake(int count) {
        for (int i = 0; i < count; i++) {
            orderDetail.add(Sweets.CAKE);
        }
    }

    /**
     * Adds a cookie to the order detail array list.
     * @param count (int) is the number of cookies to add.
     */
    public void addCookie(int count) {
        for (int i = 0; i < count; i++) {
            orderDetail.add(Sweets.COOKIE);
        }
    }

    /**
     * Adds a cupcake to the order detail array list.
     * @param count (int) is the number of cupcakes to add.
     */
    public void addCupcake(int count) {
        for (int i = 0; i < count; i++) {
            orderDetail.add(Sweets.CUPCAKE);
        }
    }

    /**
     * Adds a muffin to the order detail array list.
     * @param count (int) is the number of muffins to add.
     */
    public void addMuffin(int count) {
        for (int i = 0; i < count; i++) {
            orderDetail.add(Sweets.MUFFIN);
        }
    }

    /**
     * Adds a pie to the order detail array list.
     * @param count (int) is the number of pies to add.
     */
    public void addPie(int count) {
        for (int i = 0; i < count; i++) {
            orderDetail.add(Sweets.PIE);
        }
    }

    /**
     * Gets the total cost for an order object by iterating through the number of items in the order detail array list.
     * @return total (double) cost for the order.
     */
    public double getTotalCost() {
        double total = 0;
        for (int i = 0; i < orderDetail.size(); i++) {
            total += orderDetail.get(i).getPrice();
        }
        return total;
    }

    /**
     * Returns the order details in a string.
     * @return order (String).
     */
    @Override
    public String toString() {
        return "Order Number: " + orderNumber + "\n" +
                "Customer Name: " + name + "\n" +
                "Customer Phone Number: " + phoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)", "($1)-$2-$3") + "\n" +
                "Pickup Date: " + pickupDate + "\n" +
                "Detail: " + orderDetail + "\n" +
                "Total Cost: $" + String.format("%.2f",getTotalCost()) + "\n";
    }
}
